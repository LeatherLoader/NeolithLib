//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NeolithLib.Bootstrapper;
using UnityEngine;
using NeolithLib.API.Events;


namespace NeolithLib.API
{
	[Bootstrap]
	public class ServerManagementEvents : Facepunch.MonoBehaviour
	{
		private static ServerManagementEvents mInstance = null;
		
		public ServerManagementEvents() 
		{
			ServerManagementEvents.mInstance = this;
		}
		
		public void Awake()
		{
			DontDestroyOnLoad (this.gameObject);
		}
		
		public static void RegisterDeployableHandler<T>() where T : UnityEngine.MonoBehaviour
		{
			ServerManagementEvents.mInstance.gameObject.AddComponent<T> ();
		}

		public static void InvokeGetPlayerCamp(ServerManagement management, PlayerClient player, out Vector3 vector3, out Quaternion quaternion) {
			PreGetPlayerCampEvent preEvent = new PreGetPlayerCampEvent(management, player);
			preEvent.PlayerClient.SendMessage("PreGetPlayerCampEvent", preEvent, SendMessageOptions.DontRequireReceiver);
			preEvent.Management.SendMessage("PreGetPlayerCampEvent", preEvent, SendMessageOptions.DontRequireReceiver);
			ServerManagementEvents.mInstance.SendMessage("PreGetPlayerCampEvent", preEvent, SendMessageOptions.DontRequireReceiver);

			if (!preEvent.Cancelled) {
				preEvent.Management.GetCampSpawnForPlayer(preEvent.PlayerClient, out vector3, out quaternion);
				preEvent.Vector = vector3;
				preEvent.Quaternion = quaternion;
			}

			PostGetPlayerCampEvent postEvent = new PostGetPlayerCampEvent(preEvent.Management, preEvent.PlayerClient, preEvent.Vector, preEvent.Quaternion, preEvent.Handled, preEvent.Cancelled);
			postEvent.PlayerClient.SendMessage("PostGetPlayerCampEvent", postEvent, SendMessageOptions.DontRequireReceiver);
			postEvent.Management.SendMessage("PostGetPlayerCampEvent", postEvent, SendMessageOptions.DontRequireReceiver);
			ServerManagementEvents.mInstance.SendMessage("PostGetPlayerCampEvent", postEvent, SendMessageOptions.DontRequireReceiver);

			vector3 = postEvent.Vector;
			quaternion = postEvent.Quaternion;
		}
	}
}

